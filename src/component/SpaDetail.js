import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom"; // Import ƒëi·ªÅu h∆∞·ªõng
import axios from "axios";
import "./SpaDetail.css";
import editIcon from "../picture/Edit.png";
import deleteIcon from "../picture/Delete.png";
import Sidebar from "./Sidebar";
import AddSpa from "./AddSpa";

const SpaDetail = ({ username, onLogout }) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [spaData, setSpaData] = useState([]);
  const [isScheduleOpen, setIsScheduleOpen] = useState(false);
  const [activeMenu, setActiveMenu] = useState("home");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editStatusId, setEditStatusId] = useState(null); // L∆∞u ID ƒëang ch·ªânh s·ª≠a
  const [selectedStatus, setSelectedStatus] = useState(""); // L∆∞u tr·∫°ng th√°i ƒë∆∞·ª£c ch·ªçn
  const navigate = useNavigate();

  const toggleSchedule = () => setIsScheduleOpen(!isScheduleOpen);
  const handleMenuClick = (menu) => setActiveMenu(menu);
  const toggleModal = () => setIsModalOpen(!isModalOpen);

  const token = localStorage.getItem("token");

  useEffect(() => {
    if (!token) {
      alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
      navigate("/login");
      return;
    }

    const fetchSpa = async () => {
      try {
        const response = await axios.get("https://pet-booking-eta.vercel.app/appointments", {
          headers: { Authorization: `Bearer ${token}` },
        });
    
        console.log("üì¶ D·ªØ li·ªáu t·ª´ API:", response.data);
    
        // N·∫øu API tr·∫£ v·ªÅ m·ªôt m·∫£ng, th√¨ set th·∫≥ng v√†o state
        if (Array.isArray(response.data)) {
          setSpaData(response.data);
        } else if (Array.isArray(response.data.data)) {
          setSpaData(response.data.data);
        } else {
          console.error("‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!", response.data);
          setSpaData([]);
        }
      } catch (error) {
        console.error("üö® L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
        setSpaData([]);
      }
    };
    

    fetchSpa();
  }, [token, navigate]);
  const statusOptions = [
    { label: "Ch·ªù x√°c nh·∫≠n", value: "pending" },
    { label: "ƒê√£ x√°c nh·∫≠n", value: "confirmed" },
    { label: "ƒêang ƒë·ª£i", value: "waiting" },
    { label: "ƒêang th·ª±c hi·ªán", value: "in_progress" },
    { label: "Ho√†n th√†nh", value: "completed" },
    { label: "ƒê√£ h·ªßy", value: "canceled" },
  ];
  const handleEditClick = (id, currentStatus) => {
    setEditStatusId(id);
    setSelectedStatus(currentStatus);
  };

  const handleLogout = () => {
    onLogout();
    navigate("/login");
  };

  // L·ªçc d·ªØ li·ªáu t√¨m ki·∫øm
  const filteredData = spaData.filter(
    (item) =>
      item.service?.name && // Ch·ªâ l·∫•y nh·ªØng m·ª•c c√≥ d·ªãch v·ª• h·ª£p l·ªá
      (
        (item.customerName && item.customerName.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (item.customerPhone && item.customerPhone.includes(searchTerm))
      )
  );
  const handleUpdateStatus = async (id) => {
    if (!selectedStatus) {
      alert("Vui l√≤ng ch·ªçn tr·∫°ng th√°i!");
      return;
    }

    try {
      const response = await axios.put(
        `https://pet-booking-eta.vercel.app/appointments/${id}/status`,
        { status: selectedStatus },
        { headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" } }
      );

      console.log("‚úÖ API Response:", response.data);
      alert("C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");

      setSpaData((prevData) =>
        prevData.map((item) => (item._id === id ? { ...item, status: selectedStatus } : item))
      );
      setEditStatusId(null); // ƒê√≥ng dropdown sau khi c·∫≠p nh·∫≠t
    } catch (error) {
      const errorMessage = error.response?.data?.message || "C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i!";
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", errorMessage);
      alert(`üö® L·ªói: ${errorMessage}`);
    }
  };
  
  const handleDeleteAppointment = async (id) => {
    const confirmDelete = window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy l·ªãch h·∫πn n√†y?");
    if (!confirmDelete) return;
  
    try {
      const response = await axios.delete(
        `https://pet-booking-eta.vercel.app/appointments/${id}/cancel`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
  
      console.log("üóëÔ∏è X√≥a l·ªãch h·∫πn th√†nh c√¥ng:", response.data);
      alert("L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy!");
  
      // C·∫≠p nh·∫≠t danh s√°ch hi·ªÉn th·ªã
      setSpaData((prevData) => prevData.filter((item) => item._id !== id));
    } catch (error) {
      const errorMessage = error.response?.data?.message || "H·ªßy l·ªãch h·∫πn th·∫•t b·∫°i!";
      console.error("‚ùå L·ªói khi h·ªßy l·ªãch h·∫πn:", errorMessage);
      alert(`üö® L·ªói: ${errorMessage}`);
    }
  };
  

  return (
    <div className="container-fluid dashboard">
      <Sidebar
        activeMenu={activeMenu}
        handleMenuClick={handleMenuClick}
        isScheduleOpen={isScheduleOpen}
        toggleSchedule={toggleSchedule}
      />
      <div className="account-main">
        <div className="header-container">
          <div className="hello-user">
            <span><i className="fa-solid fa-circle-user icon-user"></i> Xin ch√†o {username}</span>
            <button className="logout" onClick={handleLogout}>Log Out</button>
          </div>
        </div>
        <div className="spa-detail-container">
          <header>
            <h1>L·ªãch Spa</h1>
            <button onClick={toggleModal} className="add-spa">+ Th√™m l·ªãch spa</button>
            <div className="search-container">
              <input
                type="text"
                placeholder="Search..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
            </div>
          </header>
          <div className="spa-detail-table">
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>T√™n kh√°ch</th>
                  <th>S·ªë ƒëi·ªán tho·∫°i</th>
                  <th>T√™n Pet</th>
                  <th>Gi·ªëng</th>
                  <th>D·ªãch v·ª•</th>
                  <th>Ng√†y</th>
                  <th>Thanh to√°n</th>
                  <th>Gi√°</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>T√πy ch·ªçn</th>
                </tr>
              </thead>
              <tbody>
                {filteredData.length > 0 ? (
                  filteredData.map((item, index) => (
                    <tr key={index}>
                      <td>{item._id}</td>
                      <td>{item.customerName}</td>
                      <td>{item.customerPhone}</td>
                      <td>{item.petName}</td>
                      <td>{item.petBreed}</td>
                      <td>{item.service?.name || "N/A"}</td>
                      <td>{item.appointmentTime ? new Date(item.appointmentTime).toLocaleString() : "Ch∆∞a ƒë·∫∑t l·ªãch"}</td>
                      <td>{item.paymentMethod || "Ch∆∞a thanh to√°n"}</td>
                      <td>{item.service?.price ? `${item.service.price} VND` : "Kh√¥ng c√≥ gi√°"}</td>
                      <td>
                      {editStatusId === item._id ? (
                        <select
                          value={selectedStatus}
                          onChange={(e) => setSelectedStatus(e.target.value)}
                        >
                          {statusOptions.map((option) => (
                            <option key={option.value} value={option.value}>
                              {option.label}
                            </option>
                          ))}
                        </select>
                      ) : (
                        item.status || "Ch∆∞a x√°c ƒë·ªãnh"
                      )}
                    </td>
                      <td>
                      {editStatusId === item._id ? (
                        <button onClick={() => handleUpdateStatus(item._id)}>L∆∞u</button>
                      ) : (
                        <button onClick={() => handleEditClick(item._id, item.status)}>
                          <img src={editIcon} alt="Edit" />
                        </button>
                      )}
                        <button onClick={() => handleDeleteAppointment(item._id)}><img src={deleteIcon} alt="Delete" /></button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="11">Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.</td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      {isModalOpen && <AddSpa onClose={toggleModal} />}
    </div>
  );
};

export default SpaDetail;