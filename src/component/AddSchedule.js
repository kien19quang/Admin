import React, { useState, useEffect } from "react";
import axios from "axios";
import "./AddSchedule.css";

const AddSchedule = ({ onClose, onAddSchedule }) => {
  const [formData, setFormData] = useState({
    customerName: "",
    customerPhone: "",
    appointmentTime: "",
    vetDoctor: "",
    status: "pending",
    note: "",
    petName: "",
    petType: "",
    petAge: "",
    petBreed: "",
    petGender: "",
    paymentMethod: "",
  });

  const [doctors, setDoctors] = useState([]);
  // üõ† Theo d√µi thay ƒë·ªïi c·ªßa `formData`
  useEffect(() => {
    console.log("üõ† formData ƒë√£ c·∫≠p nh·∫≠t:", formData);
  }, [formData]);
  // üõ† N·∫øu `_id` ƒë∆∞·ª£c c·∫≠p nh·∫≠t, t·ª± ƒë·ªông hi·ªÉn th·ªã modal x√°c nh·∫≠n

  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem("token");
      if (!token) {
        console.error("‚ùå Kh√¥ng c√≥ token! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        return;
      }

      const headers = {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      };

      try {
        const doctorRes = await axios.get(
          "https://pet-booking-eta.vercel.app/vet-doctors",
          { headers }
        );
        console.log("üìã Danh s√°ch b√°c sƒ©:", doctorRes.data?.data); // Ki·ªÉm tra d·ªØ li·ªáu
        if (Array.isArray(doctorRes.data?.data)) {
          setDoctors(doctorRes.data.data);
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi fetch d·ªØ li·ªáu:", error);
      }
    };

    fetchData();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;

    if (name === "vetDoctor") {
      setFormData((prev) => ({
        ...prev,
        vetDoctor: value, // Ch·ªâ l∆∞u ID thay v√¨ object
      }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
  
    const token = localStorage.getItem("token");
    if (!token) {
      alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p! Vui l√≤ng ƒëƒÉng nh·∫≠p.");
      return;
    }
  
    if (!formData.vetDoctor) {
      alert("‚ùå Vui l√≤ng ch·ªçn b√°c sƒ©!");
      return;
    }
  
    const payload = {
      ...formData,
      appointmentTime: new Date(formData.appointmentTime).toISOString(),
    };
  
    console.log("üì§ D·ªØ li·ªáu g·ª≠i l√™n server:", payload);
  
    try {
      const response = await axios.post(
        "https://pet-booking-eta.vercel.app/appointments",
        payload,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );
  
      console.log("üìå API Response:", response.data);
  
      // üîπ C·∫≠p nh·∫≠t `_id` n·∫øu t·ªìn t·∫°i
      setFormData((prev) => ({
        ...prev,
        _id: response.data.data?._id || "", // ƒê·∫£m b·∫£o kh√¥ng l·ªói n·∫øu API kh√¥ng tr·∫£ v·ªÅ _id
      }));
      const newAppointment = response.data.data;
      alert("üéâ L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
      if (newAppointment) {
        onAddSchedule(newAppointment);
      }
      handleCloseConfirm();
    } catch (error) {
      console.error("üö® API Error:", error.response?.data);
      alert(
        `‚ùå Kh√¥ng th·ªÉ t·∫°o l·ªãch h·∫πn: ${
          error.response?.data?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"
        }`
      );
    }
  };
  

  const handleCloseConfirm = () => {
    onClose();
  };

  return (
    <div className="add-spa-modal">
      <div className="modal-content">
        <span className="close" onClick={onClose}>
          &times;
        </span>
        <h2>T·∫°o L·ªãch Kh√°m</h2>
        <form onSubmit={handleSubmit}>
          <div>
            <label>T√™n kh√°ch h√†ng:</label>
            <input
              type="text"
              name="customerName"
              value={formData.customerName}
              onChange={handleChange}
              required
            />
          </div>
          <div>
            <label>S·ªë ƒëi·ªán tho·∫°i:</label>
            <input
              type="text"
              name="customerPhone"
              value={formData.customerPhone}
              onChange={handleChange}
              required
            />
          </div>
          <div>
            <label>Th·ªùi gian h·∫πn:</label>
            <input
              type="datetime-local"
              name="appointmentTime"
              value={formData.appointmentTime}
              onChange={handleChange}
              required
            />
          </div>
          <div>
            <label>B√°c sƒ©:</label>
            <select
              name="vetDoctor"
              value={formData.vetDoctor} // Ch·ªâ l∆∞u ID
              onChange={handleChange}
              required
            >
              <option value="">Ch·ªçn b√°c sƒ©</option>
              {doctors.map((doctor) => (
                <option key={doctor._id} value={doctor._id}>
                  {doctor.name}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label>T√™n th√∫ c∆∞ng:</label>
            <input
              type="text"
              name="petName"
              value={formData.petName}
              onChange={handleChange}
              required
            />
          </div>
          <div>
            <label>Lo·∫°i th√∫ c∆∞ng:</label>
            <input
              type="text"
              name="petType"
              value={formData.petType}
              onChange={handleChange}
              required
            />
          </div>
          <div>
            <label>Tu·ªïi:</label>
            <input
              type="number"
              name="petAge"
              value={formData.petAge}
              onChange={handleChange}
              required
            />
          </div>
          <div>
            <label>Gi·ªëng:</label>
            <input
              type="text"
              name="petBreed"
              value={formData.petBreed}
              onChange={handleChange}
              required
            />
          </div>
          <div>
            <label>Gi·ªõi t√≠nh:</label>
            <select
              name="petGender"
              value={formData.petGender}
              onChange={handleChange}
              required
            >
              <option value="">Ch·ªçn</option>
              <option value="MALE">ƒê·ª±c</option>
              <option value="FEMALE">C√°i</option>
              <option value="OTHER">Kh√°c</option>
            </select>
          </div>
          <div>
            <label>Ph∆∞∆°ng th·ª©c thanh to√°n:</label>
            <select
              name="paymentMethod"
              value={formData.paymentMethod}
              onChange={handleChange}
              required
            >
              <option value="">Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n</option>
              <option value="cash">Ti·ªÅn m·∫∑t</option>
              <option value="credit_card">Th·∫ª t√≠n d·ª•ng</option>
              <option value="paypal">PayPal</option>
            </select>
          </div>
          <div>
            <label>Ghi ch√∫:</label>
            <textarea
              name="note"
              value={formData.note}
              onChange={handleChange}
            ></textarea>
          </div>

          <div className="button-group">
            <button type="submit">T·∫°o l·ªãch kh√°m</button>
            <button type="button" onClick={onClose}>
              ƒê√≥ng
            </button>
          </div>
        </form>
      </div>

      {/* {isConfirmVisible && (
        <>
          {console.log("üìå Debug tr∆∞·ªõc khi m·ªü modal:", formData)}
          <ConfirmSchedule
            formData={formData}
            onClose={handleCloseConfirm}
            doctors={doctors}
          />
        </>
      )} */}
    </div>
  );
};

export default AddSchedule;
